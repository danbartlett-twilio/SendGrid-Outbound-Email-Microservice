AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SendGridEmailSendingMicroservice: SAM Template receive email events that triggers emails sent via SendGrid.
  
Globals:
  Function:
    Timeout: 5

Resources:

  ##########################################################################
  #  S3 Bucket
  #                        
  #  Bucket that contains any "send objects" uploaded to be sent, all
  #  formatted "request objects" ready to be sent to SendGrid and, all
  #  response objects received back from the SendGrid API.
  #  
  ########################################################################## 
  TwilioSendGridBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "twilio-sendgrid-outbound-emails-${AWS::AccountId}-${AWS::Region}"    
  TwilioSendGridBucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Sub "twilio-sendgrid-outbound-emails-${AWS::AccountId}-${AWS::Region}"
                - /*     
  

  ##########################################################################
  #  SNS Topics                 
  #
  #  Topics used to manage events into, out of, and inbetween the Microservice.
  ##########################################################################
  
  ##########################################################################
  # TwilioSendGridEmailEventTopic: Any messages sent to this topic are 
  # processed to be sent to SendGrid API. Internal applications can publish 
  # to this topic to generate email events. This topic is published 
  # externally to this stack for other AWS resources to consume.
  ##########################################################################
  TwilioSendGridEmailEventTopic:
    Type: AWS::SNS::Topic  
  TwilioSendGridEmailEventTopicPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref TwilioSendGridEmailEventTopic

  ##########################################################################
  # SendGridEventProcessingTopic: API responses back from SendGrid are sent to
  # this topic for additional processing. Error responses can be handled
  # and/or responses can be saved to databases. Events that need additional
  # handling during the processing of events can also be sent to this topic.
  ##########################################################################
  SendGridEventProcessingTopic:
    Type: AWS::SNS::Topic
  SendGridEventProcessingTopicPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref SendGridEventProcessingTopic

  ##########################################################################
  # SendGridLambdaAlarmTopic: Optional SNS Topic to notify people/systems
  # of any errors generated by the lambda functions.
  ##########################################################################
  SendGridLambdaAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'SendGridLambdaErrorAlarmTopic-${AWS::StackName}'
      ###############################################################
      # Optionally enter your email address to receive alarm notices
      ###############################################################
      # Subscription:
      #- Protocol: email        
      #  Endpoint: "some-email@some-domain.com"

  ##########################################################################
  #  Lambda Layers
  #                        
  #  External libraries are put in layers to keep cleaner and simpler
  #  lambdas and for DRY/resuse.
  #  
  ##########################################################################

  ###############################################################
  # SendGridSharedFunctionsLayer: DRY functions
  ###############################################################
  SendGridSharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SendGridSharedLayer
      Description: Shared functions for DRY
      ContentUri: layers/layer-shared/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ###############################################################
  # SendGridLayer: SendGrid node.js SDK for interacting
  # with SendGrid.
  ###############################################################
  SendGridLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SendGridLayer
      Description: SendGrid Node.js SDK
      ContentUri: layers/layer-sendgrid/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain  

  ###############################################################
  # SendGridNanoidLayer: Nanoid library to generate unique id's.  
  ###############################################################
  SendGridNanoidLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SendGridNanoidLayer
      Description: Generates unique IDs
      ContentUri: layers/layer-nanoid/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ##########################################################################
  #  (SendGridProcessEmailEventFunction) Lambda Function                            
  #                          
  #  This function is invoked when an object matching *.json is put into 
  #  the /uploads folder of the S3 TwilioSendGridBucket bucket.
  #  Function opens the json object, adds some params and then puts a new
  #  json file into the /requests directory of the same S3 bucket.
  ##########################################################################
  SendGridProcessEmailEventFunction:
    Type: AWS::Serverless::Function
    Properties:      
      Description: Invoked by S3 event or SNS message. Configures message OBJ and saves to S3 bucket.
      CodeUri: lambdas/process-email-event/
      Handler: app.lambdaHandler
      AutoPublishAlias: livex
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt SendGridProcessEmailEventFunctionRole.Arn       
      Timeout: 3      
      MemorySize: 128   
      EventInvokeConfig: 
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          ##############################################
          # In this lambda the API KEY ID is set. The 
          # actual corresponding API Key is set/used in the 
          # send-email lambda.
          #
          # If using only 1 API KEY ID, you can set it here
          # BUT make sure that you follow best practices
          # leveraging AWS Mechanism for storing secrets,
          # password, parameters.
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
          # If you are using more than 1 API Key, refer
          # to the comments in the lambda to code as to
          # where you could inject logic to set / select
          # the correct API Key to use.
          ##############################################
          # Set a test API Key ID like below for TESTING/POC
          # DO NOT STORE VALUES LIKE THIS IN PRODUCTION CODE!...
          SENDGRID_API_KEY_ID: "<YOUR-TEST-SENDGRID-API-KEY-ID>"
          # Use a secure method for production such as 
          # pulling from the AWS Parameter Store or Secrets Manager.
          # For example:
          # SENDGRID_API_KEY_ID: '{{resolve:ssm:SENDGRID_API_KEY_ID}}'     
          SNStopic: !Ref SendGridEventProcessingTopic
          BucketName: !Sub "twilio-sendgrid-outbound-emails-${AWS::AccountId}-${AWS::Region}"
      Layers:
        - !Ref SendGridSharedLayer
        - !Ref SendGridNanoidLayer
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref 'TwilioSendGridBucket'
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/'  
                  - Name: suffix
                    Value: '.json'    
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TwilioSendGridEmailEventTopic

  ##########################################################################
  #  Role for Lambda Function                            
  #                          
  #  Give permissions to lambda function, SendGridProcessEmailEventFunction.
  ##########################################################################
  SendGridProcessEmailEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole 
      ManagedPolicyArns:        
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref TwilioSendGridBucketPolicy        
        - !Ref SendGridEventProcessingTopicPolicy
  
  ##########################################################################
  #  Alarm for Lambda Function: publish to SNS topic onError                            
  ##########################################################################
  SendGridProcessEmailEventFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:      
      AlarmActions:
        - !Ref SendGridLambdaAlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SendGridProcessEmailEventFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1

  ##########################################################################
  #  (SendEmailFunction) Lambda Function                            
  #                          
  #  This function is invoked when an object is created in the 
  #  TwilioSendGridBucket S3 bucket and in the "request" folder / prefix.
  #  Function reads the JSON object from S3 and makes the API Call.
  ##########################################################################
  SendEmailFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Description: Trigged by S3 Put event, calls SendGrid API
      CodeUri: lambdas/send-email/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Timeout: 10
      EventInvokeConfig: 
        MaximumRetryAttempts: 0
      Role: !GetAtt SendEmailFunctionRole.Arn        
      Environment:
        Variables:
          ##############################################
          # In this lambda the API KEY is set. The 
          # proccess-email-event lambda sets the 
          # corresponding API Key ID is set/used in the 
          # send-email lambda. The API Key ID could be
          # used to lookup to the API Key at runtime.
          #
          # If using only 1 API KEY, you can set it here
          # BUT make sure that you follow best practices
          # leveraging AWS Mechanism for storing secrets,
          # password, parameters.
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
          # If you are using more than 1 API Key, refer
          # to the comments in the lambda to code as to
          # where you could inject logic to set / select
          # the correct API Key to use.
          ##############################################
          # Set a test API Key like below for POC
          # DO NOT STORE VALUES LIKE THIS IN CODE!...
          SENDGRID_API_KEY: "<YOUR-TEST-SENDGRID-API-KEY>"          
          # Use a secure method for production such as 
          # pulling from the AWS Parameter Store or Secrets Manager.
          # For example:
          # SENDGRID_API_KEY: '{{resolve:ssm:SENDGRID_API_KEY}}'          
          SNStopic: !Ref SendGridEventProcessingTopic
      Layers:
        - !Ref SendGridSharedLayer
        - !Ref SendGridLayer
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref 'TwilioSendGridBucket'
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'requests/'  
                  - Name: suffix
                    Value: '.json'  

  ##########################################################################
  #  Role for Lambda Function                            
  #                          
  #  Give permissions to lambda function, SendEmailFunction.
  ##########################################################################
  SendEmailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole 
      ManagedPolicyArns:        
        - !Ref TwilioSendGridBucketPolicy
        - !Ref SendGridEventProcessingTopicPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ##########################################################################
  #  Alarm for Lambda Function: publish to SNS topic onError                            
  ##########################################################################
  SendEmailFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:      
      AlarmActions:
        - !Ref SendGridLambdaAlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SendEmailFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1     

  ##########################################################################
  #  (SendGridEventProcessingTopicHandleFunction) Lambda Function                            
  #                          
  #  This function is invoked by SNS message from one of the lambdas. 
  #  Placeholder to allow additional processing of events and errors.
  #  
  #  View the cloudwatch logs for this lambda to see the contents of
  #  the SNS messages generated.
  ##########################################################################
  SendGridEventProcessingTopicHandleFunction:
    Type: AWS::Serverless::Function
    Properties:      
      Description: Invoked by SNS message from one of the lambdas. Placeholder to allow additional processing of events and errors.
      CodeUri: lambdas/handle-sns-placeholder/
      Handler: app.lambdaHandler
      AutoPublishAlias: livex
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt SendGridEventProcessingTopicHandleFunctionRole.Arn       
      Timeout: 3      
      MemorySize: 128      
      Events:  
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SendGridEventProcessingTopic

  ##########################################################################
  #  Role for Lambda Function                            
  #                          
  #  Give permissions to lambda function, SendGridProcessEmailEventFunction.
  ##########################################################################
  SendGridEventProcessingTopicHandleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole 
      ManagedPolicyArns:        
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref SendGridEventProcessingTopicPolicy


##########################################################################
#   Outputs
##########################################################################
Outputs:

  TwilioSendGridEmailEventTopic:
    Description: SNS topic used for email events to be processed.
    Value: !GetAtt TwilioSendGridEmailEventTopic.TopicName
    Export:
      Name: 'TwilioSendGridEmailEventTopic'

  TwilioSendGridEmailEventTopicARN:
    Description: ARN SNS topic used for email events to be processed.
    Value: !Ref TwilioSendGridEmailEventTopic    
    Export:
      Name: 'TwilioSendGridEmailEventTopicARN'